// File: backend/src/app.ts
// Updated main application file with platform integration

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import routes from './routes';
import { AIService } from './services/AIService';
import { CompanyManager } from './core/companies/CompanyManager';
import { PlatformManager } from './platforms/PlatformManager'; // NEW

const app = express();

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3001',
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Routes
app.use('/api', routes);

// Enhanced startup initialization
async function initializeServices() {
  try {
    console.log('🚀 Starting AI Insurance Agent - Multi-Platform Edition...');
    
    // Initialize core services in order
    console.log('📊 Initializing Company Manager...');
    const companyManager = CompanyManager.getInstance();
    await companyManager.initialize();
    
    console.log('🤖 Initializing AI Service...');
    const aiService = AIService.getInstance();
    await aiService.initialize();
    
    // NEW: Initialize Platform Manager
    console.log('📱 Initializing Platform Manager...');
    const platformManager = PlatformManager.getInstance();
    await platformManager.initialize();
    
    console.log('✅ All services initialized successfully');
    
    // Log system status
    const companies = companyManager.getActiveCompanies();
    const platformStats = platformManager.getPlatformStats();
    
    console.log(`🏢 Active companies: ${companies.length}`);
    console.log(`📱 Platforms available: ${Object.keys(platformStats).join(', ')}`);
    
    for (const company of companies) {
      const fullConfig = await companyManager.getCompanyConfig(company.id);
      const enabledPlatforms = Object.keys(fullConfig.platforms || {})
        .filter(p => (fullConfig.platforms as any)[p]?.enabled);
      console.log(`   • ${company.name}: ${enabledPlatforms.join(', ')}`);
    }
    
  } catch (error) {
    console.error('❌ Failed to initialize services:', error);
    process.exit(1);
  }
}

// Global error handling
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('🚨 Unhandled error:', error);
  
  res.status(500).json({
    success: false,
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'Route not found',
    message: `Cannot ${req.method} ${req.originalUrl}`
  });
});

// Start server
const PORT = process.env.PORT || 3000;

app.listen(PORT, async () => {
  console.log(`🌟 Server running on port ${PORT}`);
  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
  
  // Initialize services after server starts
  await initializeServices();
  
  console.log('🎯 Ready for Phase 3 Platform Expansion!');
  console.log('📱 Instagram Business API integration active');
  console.log('🔗 Webhook endpoints available:');
  console.log(`   • WhatsApp: POST /api/whatsapp/webhook`);
  console.log(`   • Instagram: POST /api/instagram/webhook`);
  console.log(`   • Testing: POST /api/test-multi-platform`);
});

export default app;